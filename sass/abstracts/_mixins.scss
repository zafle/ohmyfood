@use 'sass:list';
@use 'sass:map';

// SHADOWS

@mixin box-shadow($x, $y, $blur, $transparency) {
    box-shadow: #{$x}px #{$y}px #{$blur}px rgba(0, 0, 0, $transparency);
}

// FLEX
// set row-gap
@mixin flex-column($r-gap) {
    display: flex;
    flex-direction: column;
    row-gap: $r-gap;
}

// set column-gap and row-gap
@mixin flex-row($c-gap, $r-gap) {
    display: flex;
    flex-direction: row;
    -moz-column-gap: $c-gap;
         column-gap: $c-gap;
    row-gap: $r-gap;
}

// DIV CENTER

@mixin div-center {
    margin-left: auto;
    margin-right: auto;
}

// MAX WIDTH

@mixin max-width-large {
    max-width: 1055px;
    @include div-center;
}

// GENERATE ANIMATION FOR MENU DISHES APPEARANCE

// this mixin is only to use inside the dishes-animation mixin
// it writes code for each service given (service-type),
// given the restaurant's name, the number of dishes, and the step delay
@mixin service-entrance($restaurant-name, $dishes-number, $service-type, $step-delay) {
    @for $i from 1 through $dishes-number {
        .restaurant-menu {
          &__#{$restaurant-name} &__service:nth-of-type(#{$service-type}) &__item:nth-child(#{$i}) {
              -webkit-animation: dish-appear 1s ease-out calc( ( $step-delay + (200 * $i) ) * 1ms ) both;
                      animation: dish-appear 1s ease-out calc( ( $step-delay + (200 * $i) ) * 1ms ) both;
          }
        }
    }
}

// this mixin is to be used in the _menus.scss for dishes entrance animation
// it uses the $restaurants map defined in _variables.scss
@mixin dishes-animation($restaurants) {
    @each $name, $starters, $main-courses, $desserts in $restaurants {
        /* animation for #{$name} entrance dishes */

        // list definition for numbers of dishes for each service
        $services: $starters, $main-courses, $desserts;

        // calcul of the animation delay applied for each service
        $step-delay-starters: 0;
        $step-delay-main-courses: calc($starters * 200);
        $step-delay-desserts: calc( $step-delay-main-courses + ($main-courses * 200) );

        // list of the animation delays for each service
        $step-delays: $step-delay-starters, $step-delay-main-courses, $step-delay-desserts;

        // use of the service-entrance mixin for each service
        @for $i from 1 through 3 {
            @include service-entrance($restaurant-name: $name, $dishes-number: list.nth($services, $i), $service-type: $i, $step-delay: list.nth($step-delays, $i) );

        }
    }
}

// LOADER

// generate hearts start positions
@mixin heart-loader-start-position {
    @for $i from 1 through 8 {
        .loader__image:nth-of-type(#{$i}) {
            $heart-angle: list.nth($heart-angles, $i);
            transform: translate( calc( cos($heart-angle) *  $heart-position-start), calc( sin($heart-angle) * $heart-position-start) ) rotate(calc( ($i - 1) * 45) * 1deg);
            -webkit-animation: anim-heart-#{$i} 1200ms ease-in-out calc(300ms * ($i - 1)) 10 alternate both;
                    animation: anim-heart-#{$i} 1200ms ease-in-out calc(300ms * ($i - 1)) 10 alternate both;
        }
    }
}

// keyframes for hearts animation
@mixin keyframes($heart-angle, $i) {
    @-webkit-keyframes anim-heart-#{$i} {
        0% {
            transform: translate( calc( cos($heart-angle) *  $heart-position-start), calc( sin($heart-angle) * $heart-position-start) ) rotate(calc( ($i - 1) * 45) * 1deg);
            opacity: 0;
        }
        25% {
            transform: translate( calc( cos($heart-angle) *  $heart-position-end), calc( sin($heart-angle) * $heart-position-end) ) rotate(calc( ($i - 1) * 45) * 1deg);
        }
        40% {
            opacity: 1;
        }
        100% {
            transform: translate( calc( cos($heart-angle) *  $heart-position-end), calc( sin($heart-angle) * $heart-position-end) ) rotate(calc( ($i - 1) * 45) * 1deg);
            opacity: 1;
            -webkit-animation-timing-function: cubic-bezier(.04,.93,.1,.85);
                    animation-timing-function: cubic-bezier(.04,.93,.1,.85);
        }
    }
    @keyframes anim-heart-#{$i} {
        0% {
            transform: translate( calc( cos($heart-angle) *  $heart-position-start), calc( sin($heart-angle) * $heart-position-start) ) rotate(calc( ($i - 1) * 45) * 1deg);
            opacity: 0;
        }
        25% {
            transform: translate( calc( cos($heart-angle) *  $heart-position-end), calc( sin($heart-angle) * $heart-position-end) ) rotate(calc( ($i - 1) * 45) * 1deg);
        }
        40% {
            opacity: 1;
        }
        100% {
            transform: translate( calc( cos($heart-angle) *  $heart-position-end), calc( sin($heart-angle) * $heart-position-end) ) rotate(calc( ($i - 1) * 45) * 1deg);
            opacity: 1;
            -webkit-animation-timing-function: cubic-bezier(.04,.93,.1,.85);
                    animation-timing-function: cubic-bezier(.04,.93,.1,.85);
        }
    }
}

// generate differents keyframes for each heart's loader
@mixin heart-keyframes {
    @for $i from 1 through 8 {
        $heart-angle: list.nth($heart-angles, $i);
        @include keyframes($heart-angle, $i);
    }
}
